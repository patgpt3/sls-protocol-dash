name: Vericast Deployment

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
    branches:
      - vericast

jobs:
  terraform-actions:
    name: Vericast Deployment
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./devops/deploy

    permissions:
      actions: write
      checks: write
      id-token: write
      contents: read
      issues: write
      packages: write
      pull-requests: write
      statuses: write

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Git Version and Info
        run: |
          git --version
          git status

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        id: aws-creds
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: arn:aws:iam::969879201070:role/waev-deployment
          role-session-name: githubsession
          output-credentials: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: Download TFVars File
        uses: prewk/s3-cp-action@v2
        with:
          source: 's3://waevdata-infrastructure/terraform/vericast/dashboard.tfvars'
          dest: './devops/deploy/.tfvars'
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID_DATA }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DATA }}
        continue-on-error: false

      - name: Terraform Fmt
        id: fmt
        run: terraform fmt -check -diff
        continue-on-error: false

      - name: Terraform Init
        id: init
        run: terraform init -input=false  -upgrade
        continue-on-error: false

      - name: Terraform Workspace
        id: workspace
        run: terraform workspace select vericast || terraform workspace new vericast
        continue-on-error: false

      - name: Terraform Refresh
        id: refresh
        env:
          SHA: ${{ github.sha }}
          AUTHOR: ${{ github.actor }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ROLE_SESSION_NAME: githubsession
          AWS_SESSION_TOKEN: ${{ steps.aws-creds.outputs.aws-session-token }}
          AWS_ROLE_ARN: arn:aws:iam::969879201070:role/waev-deployment
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN_DATA }}
        run: terraform refresh --var-file=.tfvars
        continue-on-error: false

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        continue-on-error: false

      - name: Terraform Plan
        id: plan
        env:
          SHA: ${{ github.sha }}
          AUTHOR: ${{ github.actor }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ROLE_SESSION_NAME: githubsession
          AWS_SESSION_TOKEN: ${{ steps.aws-creds.outputs.aws-session-token }}
          AWS_ROLE_ARN: arn:aws:iam::969879201070:role/waev-deployment
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN_DATA }}
        run: terraform plan --var-file=.tfvars
        continue-on-error: true

      - name: Comment on PR
        uses: actions/github-script@v4
        if: github.event_name == 'pull_request'
        env:
          format_out: ${{ steps.fmt.outputs.stdout }}
          format_err: ${{ steps.fmt.outputs.stderr }}
          init_out: ${{ steps.init.outputs.stdout }}
          init_err: ${{ steps.init.outputs.stderr }}
          validate_out: ${{ steps.validate.outputs.stdout }}
          validate_err: ${{ steps.validate.outputs.stderr }}
          plan: '${{ steps.plan.outputs.stdout }}'
        with:
          github-token: ${{ github.token }}
          script: |
            const CODE_BLOCK = '```';
            const fmt_result = '${{ steps.fmt.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
            const init_result = '${{ steps.init.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
            const validate_result = '${{ steps.validate.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
            const plan_result = '${{ steps.plan.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';

            const output = `
            ##### ${ fmt_result } Terraform Format and Style üé®
            <details><summary>Logs</summary>
            Output

            ${ CODE_BLOCK }diff
            ${ process.env.format_out }
            ${ CODE_BLOCK }

            Errors

            ${ CODE_BLOCK }
            ${ process.env.format_err }
            ${ CODE_BLOCK }
            </details> <!-- End Format Logs -->

            ##### ${ init_result } Terraform Initialization ‚öôÔ∏è
            <details><summary>Logs</summary>
            Output

            ${ CODE_BLOCK }
            ${ process.env.init_out }
            ${ CODE_BLOCK }

            Errors

            ${ CODE_BLOCK }
            ${ process.env.init_err }
            ${ CODE_BLOCK }
            </details> <!-- End Init Logs -->

            ##### ${ validate_result } Terraform Validation ü§ñ
            <details><summary>Logs</summary>
            Output

            ${ CODE_BLOCK }
            ${ process.env.validate_out }
            ${ CODE_BLOCK }

            Errors

            ${ CODE_BLOCK }
            ${ process.env.validate_err }
            ${ CODE_BLOCK }
            </details> <!-- End Validate Logs -->

            ##### ${ plan_result } Terraform Plan üìñ
            <details><summary>Logs</summary>

            ${ CODE_BLOCK }terraform
            ${ process.env.plan }
            ${ CODE_BLOCK }
            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Commit: \`${{ github.sha }}\`, Workflow: \`${{ github.workflow }}\`*`;

            <!-- Lookup Comment -->
            const {data: comments} = await github.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.number,
            })

            const statusComment = comments.find(comment => comment.body.includes("Terraform Format and Style"))

            if (statusComment) {
              await github.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: statusComment.id,
                body: output
              })
            } else {
              await github.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: 'End results'
        shell: bash
        run: |
          echo fmt
          test ${{ steps.fmt.outputs.exitcode }} -eq 0
          echo init
          test ${{ steps.init.outputs.exitcode }} -eq 0
          echo refresh
          test ${{ steps.refresh.outputs.exitcode }} -eq 0
          echo validate
          test ${{ steps.validate.outputs.exitcode }} -eq 0
          echo plan
          test ${{ steps.plan.outputs.exitcode }} -eq 0
        continue-on-error: false

      - name: Cache Dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: |
            build
            node_modules
          key: ${{ runner.os }}-app

      - name: Build Package
        if: github.event.pull_request.draft == false
        id: build
        run: |
          npm install --legacy-peer-deps && npm run build:development || exit 1

      - name: Terraform Apply
        if: github.event.pull_request.draft == false
        id: apply
        env:
          SHA: ${{ github.sha }}
          AUTHOR: ${{ github.actor }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ROLE_SESSION_NAME: githubsession
          AWS_SESSION_TOKEN: ${{ steps.aws-creds.outputs.aws-session-token }}
          AWS_ROLE_ARN: arn:aws:iam::969879201070:role/waev-deployment
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN_DATA }}
        run: terraform apply --var-file=.tfvars -auto-approve
        continue-on-error: false
